float gravity = 0.05;

float initialAreaPerBall = 75000;

float friction = 0.1;

float repulsion = 0.5;

float attraction = 0.01;

Ball[] balls;

float maxT = 0.0;

int maxNumCollisions = 0;

Ball selectedBall = null;

int expansionDuration = 10;

float expansionIncrement = 5;

int backgroundColor = 64;

int textColor = 255;

int ballColor = 0;

int baseLineColor = 126;

int lineColorIncrement = 10;

int edgeColor = 255;

String[] names = window.location.search.substring(1).split('&');

void setup() {
    balls = new Ball[names.length];
    size(window.innerWidth - 25, window.innerHeight - 85);
    strokeWeight(3);
    smooth();

    String longestName = "";
    for (int i = 0; i < names.length; i++) {
        String name = decodeURIComponent(names[i]);
        if (longestName.length() < name.length()) {
            longestName = name;
        }
        Ball newBall = new Ball(0, 0, 60, i, balls, name);
        setRandomStartingPoint(newBall);
        while (overlapsOthers(newBall,balls,i)) {
            setRandomStartingPoint(newBall);
        }
        balls[i] = newBall;
    }
    PFont fontA = loadFont("Arial");
    textFont(fontA, 9);
    textAlign(CENTER);
    smooth();

    _gaq.push(['_trackEvent', 'Browser Area', 'load', window.innerWidth + 'x' + window.innerHeight, window.innerWidth*window.innerHeight]);
    _gaq.push(['_trackEvent', 'Names', 'number', names.length]);
    _gaq.push(['_trackEvent', 'Names', 'longest', longestName, longestName.length()]);
}

void setRandomStartingPoint(Ball ball) {
    float maxRadius = sqrt(names.length * initialAreaPerBall)/PI;
    float radius = sqrt(random(0, maxRadius*maxRadius));
    float angle = random(0, 360);
    float deltaX = sin(radians(angle))*radius;
    float deltaY = cos(radians(angle))*radius;
    /*
    float maxDelta = sqrt(names.length * initialAreaPerBall)/2;
    float deltaX = random(-maxDelta, maxDelta);
    float deltaY = random(-maxDelta, maxDelta);
    */
    ball.p.x = width/2 + deltaX;
    ball.p.y = height/2 + deltaY;


}

boolean overlapsOthers(Ball newBall, Ball[] balls, int numBalls) {
    boolean overlaps = false;
    for (int i = 0; i < numBalls; i++) {
        Ball other = balls[i];
        PVector normal = PVector.sub(other.p, newBall.p);
        float distance = normal.mag();
        float minDist = other.diameter/2 + newBall.diameter/2;
        if (distance < minDist) {
            overlaps = true;
            break;
        }
    }
    return overlaps;
}

void draw() {
    boolean collision = true;
    int numCollisions = 0;
    for (int i = 0; i < names.length; i++) {
        Ball ball = balls[i];
        if (ball.growing > 0) {
            ball.diameter += expansionIncrement/expansionDuration;
        }
    }
    while (collision) {
        if (numCollisions > 100) {
            break;
        }
        collision = false;
        for (int i = 0; i < names.length; i++) {
            collision = collision || balls[i].collide();
        }
        if (collision) {
            numCollisions++;
            if (numCollisions > maxNumCollisions) {
                maxNumCollisions = numCollisions;
            }
        }
    }
    for (int i = 0; i < names.length; i++) {
        balls[i].growing--;
        balls[i].move();
    }
    display();
}

void display() {
    background(backgroundColor);
    Connection.display();
    for (int i = 0; i < names.length; i++) {
        balls[i].display();
    }
}

void mouseClicked() {
    PVector mouse = new PVector(mouseX, mouseY);
    for (int i = 0; i < names.length; i++) {
        Ball ball = balls[i];
        float distance = PVector.sub(ball.p, mouse).mag();
        if (distance < ball.diameter/2) {
            if (selectedBall == null) {
                selectedBall = ball;
                playSound('Boing03');
            }
            else if (selectedBall == ball) {
                playSound('Boing02');
                selectedBall = null;
            }
            else {
                playSound('Whizz');
                Connection.add(ball, selectedBall);
                selectedBall = null;
            }
            return;
        }
    }
    selectedBall = null;
    playSound('Boing02');
}

class Connection {
    Ball a;
    Ball b;
    int strength;
    static ArrayList connections = new ArrayList();

    Connection(Ball aIn, Ball bIn) {
        a = aIn;
        b = bIn;
        strength = 1;
    }

    static void display() {
        for (int i = 0; i < connections.size(); i++) {
            Connection connection = get(i);
            stroke(min(baseLineColor+connection.strength*lineColorIncrement,255));
            strokeWeight(connection.strength);
            line(connection.a.p.x, connection.a.p.y, connection.b.p.x, connection.b.p.y)
        }
    }

    static void add(Ball first, Ball second) {
        first.addConnection();
        second.addConnection();
        Ball a = first;
        Ball b = second;
        if (a.id > b.id) {
            a = second;
            b = first;
        }
        Connection connection = find(a, b);
        if (connection == null) {
            connections.add(new Connection(a, b));
        }
        else {
            connection.strength++;
        }
    }

    static Connection find(Ball a, Ball b) {
        for (int i = 0; i < connections.size(); i++) {
            Connection connection = get(i);
            if (connection.a == a && connection.b == b) {
                return connection;
            }
        }
        return null;
    }

    static Connection get(int i) {
        return (Connection)connections.get(i);
    }

    static int size() {
        return connections.size();
    }
}

class Ball {
    float diameter;
    PVector p;
    PVector v;
    int id;
    String name;
    int growing;

    Ball[] others;
    Ball(float xin, float yin, float din, int idin, Ball[] oin, String nameIn) {
        p = new PVector(xin, yin);
        v = new PVector(0,0);
        diameter = din;
        id = idin;
        others = oin;
        name = nameIn;
        growing = 0;
    }

    void addConnection() {
        growing = expansionDuration;
    }

    float mass() {
        return area()*diameter;
    }

    float area() {
        return diameter*diameter;
    }

    boolean collide() {
        boolean collision = false;
        for (int i = id + 1; i < names.length; i++) {
            Ball other = others[i];
            PVector normal = PVector.sub(other.p, p);
            float distance = normal.mag();
            float minDist = other.diameter/2 + diameter/2;
            if (distance < minDist) {
                collision = true;
                p.sub(v);
                other.p.sub(other.v);
                normal = PVector.sub(other.p, p);
                normal.normalize();
                PVector tangent = new PVector(-normal.y, normal.x);
                float v1Normal = normal.dot(v);
                float v2Normal = normal.dot(other.v);
                float v1Tangent = tangent.dot(v);
                float v2Tangent = tangent.dot(other.v);

                if (growing > 0) {
                    v1Normal += expansionIncrement/expansionDuration/2;
                    v1Tangent += expansionIncrement/expansionDuration/2;
                }
                if (other.growing > 0) {
                    v2Normal += expansionIncrement/expansionDuration/2;
                    v2Tangent += expansionIncrement/expansionDuration/2;
                }

                float v1NormalNew = (v1Normal*(mass()-other.mass())+2*other.mass()*v2Normal)/(mass()+other.mass());
                float v2NormalNew = (v2Normal*(other.mass()-mass())+2*mass()*v1Normal)/(mass()+other.mass());

                v = PVector.add(PVector.mult(normal, v1NormalNew),PVector.mult(tangent, v1Tangent));
                other.v = PVector.add(PVector.mult(normal, v2NormalNew),PVector.mult(tangent, v2Tangent));

                p.add(v);
                other.p.add(other.v);
            }
        }
        return collision;
    }

    void move() {
        PVector totalForce = PVector.add(forceGravity(),forceFriction());
        totalForce.add(forceRepulsion());
        totalForce.add(forceAttraction());
        PVector acceleration = PVector.mult(totalForce, 1/mass());
        v.add(acceleration);
        p.add(v);
    }

    PVector forceGravity() {
        PVector center = new PVector(width/2, height/2);
        PVector down = PVector.sub(center, p);
        PVector force = PVector.mult(down, mass()/center.mag()*gravity);
        return force;
    }

    PVector forceFriction() {
        PVector force = PVector.mult(v, -area()*friction);
        return force;
    }

    PVector forceRepulsion() {
        PVector force = new PVector(0,0);
        for (int i = 0; i < balls.length; i++) {
            if (i != id) {
                PVector normal = PVector.sub(p, balls[i].p);
                float distance = normal.mag();
                normal.normalize();
                force.add(PVector.mult(normal, repulsion/(distance*distance)*area()*balls[i].area()));
            }
        }
        return force;
    }

    PVector forceAttraction() {
        PVector force = new PVector(0,0);
        for (int i = 0; i < Connection.size(); i++) {
            Connection connection = Connection.get(i);
            if (connection.a == this) {
                PVector normal = PVector.sub(connection.b.p, p);
                float distance = normal.mag() - diameter/2 - connection.b.diameter/2;
                normal.normalize();
                force.add(PVector.mult(normal, attraction*distance*distance*connection.strength));
            }
        }
        for (int i = 0; i < Connection.size(); i++) {
            Connection connection = Connection.get(i);
            if (connection.b == this) {
                PVector normal = PVector.sub(connection.a.p, p);
                float distance = normal.mag() - diameter/2 - connection.a.diameter/2;
                normal.normalize();
                force.add(PVector.mult(normal, attraction*distance*distance*connection.strength));
            }
        }
        return force;
    }

    int fontSize() {
        return diameter/5;
    }

    void display() {
        fill(ballColor);
        if (this == selectedBall) {
            stroke(150, 150, 200);
            strokeWeight(5);
        }
        else {
            stroke(edgeColor);
            strokeWeight(2);
        }
        ellipse(p.x, p.y, diameter, diameter);
        fill(textColor);
        textSize(fontSize());
        text(name, p.x, p.y+fontSize()/2);
    }
}

/*

Next work on gravity model.  Probably rewrite move.  currently looks like gravity is the acceleration due to gravity per frame.  It's independent of size of the circle.  That won't work for me.  I also need to have logic
to bounce off walls.

Since the force due to gravity is proportional to m1*m2, but the acceleration due to force is inversely proportional to m, then the acceleration due to gravity is only due to the mass of the fixed point.  So it won't go faster, but would it push
other stuff out of the way?  I don't think that's modeled here by just bouncing ... or is it?  Bouncing should be affected by mass, should it not?  If two of the balls repulse each other equally, the smaller one will go away faster.

conservation of linear momentum - m1*v1b + m2*v2b = m1*v1a + m2*v2a

make size based on window size

start conversion to student including name, list of connections, function for weight and diameter

Problem - collision ignores previously calculated collisions.  so if I'm colliding with 2 others, I'll update my velocity for one, then the other, which could bounce me right back into the first.

Try this - during collision updates, also update position to the extent that they are no longer overlapping.  Given amount of overlap and relative velocity in the normal direction, should be able to determine how long it would take so that they were no
longer overlapping.  I think.  May need to repeatedly run the collision stuff until no longer is anybody overlapping.  For now, skip that.  It shouldn't be too hard to simply correct so that there's no overlap.

Need to try rerunning the collision phase whenever there were any collisions during the last one.

Try this - determine when the collision would have occurred, up to 1 time step ago.  Determine the velocity vectors and then estimate where they would be at the current time. Keep doing this until no more collisions.

time of collision - need negative relative velocity.

Screw this, role back to beginning of timestep and calc collision then

*/